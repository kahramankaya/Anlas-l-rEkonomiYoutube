# url= https://www.youtube.com/watch?v=flaiHTHhyE4&list=PLK8LlaNiWQOvAYUMGMTFeZIOo0oKmZhdw&index=1
# video3: değişkenler: nominal, ordinal, metrik (ılk ıkısı kategorık ıken dıgerı ıse sayısal ıcın kullanılır.)
# nominal(sınıfsal): degerler arasında karsılastırma yapılamaz. ornek erkek ve kadın. karsılastırılamaz ama sınıflanabilir.
# ordinal: burada ise bir karşılaştırma olabilir. sıralama vardır. A<B<C<D gibi...


# betimsel istatistik: istatislik sürecin ilk adımıdır. bu kısım veri setinde öyle küçük bir şekilde bakmamızı sağlar. çok az bilgiye sahip olmamızı sağlar. ve burada betimsel istatistik 2 gruba ayrılır: merkezi eğilim ve de merkezi dağılım olarak.
# merkezi eğilim: aritmetik ortalama , kartiller, mod, medyan (bunlar en yaygın olanları)
# merkezi dağılım: değişim aralığı, standart sapma, varyans, çarpıklık, basıklık(merkezi dağılım bize alan verir.)
# kartil: integrali hatırla. kartil alanı yüzde 25 lik kere böler. 3 tane kartil vardır. ve de ikinci kartil medyan dır.


# standart sapma : çok önemlidir. standart sapma her bir degerin tum verı setının ortalamasından uzaklıgını gosterır. mesela deger 15 ve ortalama 10 ise std burada 5 diye ifade edilebilir.
# std nin yüksek olması bize riskin yüksek yani degerlerin ortalamadan çok uzaklaştığını gösterir.


# video 11 :
#standart sapma hesaplama formülü: her bir gözlemden veri setinin ortalamasını çıkarırsak ve daha sonra bu her bir veriyi toplarsak sonuç her zaman 0 çıkar. bunu engellemek için her bır gozlemı ortalamadan cıkarırken onun karesını al. daha sonra bu her bır kareyı toplayıp n-1  e böleceğiz. burda ki n gözlem saysısı oluyor. n-1 e boldukten sonra cıkan sonucun karesını al ve işlem bitti. bu sonucta standart  sapma oluyor.
# standart sapma bize her bir değerin ortalama değerden ne kadar uzakta olduğunu gösterir.
# finansta alabileceğin en iyi yatırım standart sapması en küçük olan yatırımdır.

# video 12:
varyans: varyans da standart sapma gibi bir dağılım ölçüsüdür aslında. ve standart sapmanın karesi bize varyansı verir.
yine aynı şekilde varyansta standart sapma gibi risk faktörü için çok önemlidir. finansta varyansın daha düşük olması bizim için daha önemlidir.
standart sapma değerine std büyüdükçe histogram grafiği sag ve sola dogru basılır gıbı olur. çünkü histogram grafiğinin ortası medyan ise sağ ve sola ne kadar uzaklaşması std nin büyüklüğü hakkında bize bilgi verir. bu aynı şekilde varyans için de geçerlidir.



# video 13:
# veri dağılım türleri: normal dağılım, negatif dağılım , pozitif dağılım. ve her dağılımda mod, medyan, ortalama değerlerinin yeri değişiyor dikkat et.
# çarpıklık(Skewness): normal dağılımda simetrik yapı bozulduğunda yani pozitif ve negatif dağılım olunca ortaya çarpıklık ortaya çıkıyor.
# normal dağılım da eğer uç değerler eklenirse çarpıklık ortaya çıkar. uç değer demek her değer diyelim ki 1000 civarında iken mesela eklenen yeni değerin 5 olması çarpıklığa yol açar.

# video 14:
# kurtosis(basıklık): kurtosis sınırı 3 olarak kabul edilir. eğer kurtosis 3 ten büyükse grfaik incelir ve kurtosis pozif olur. 3 ten küçük ise tam tersi durum olur.
# pozitif kurtosis negatiife göre değerleri ortalamaya daha yakındır. çünkü grafik dikleştikçe değerler medyan etrafında toplanıyor. bu da standart sapmanın küçük olmasına neden oluyor.


# video 15: 
# veri=pd.read_csv('https://raw.githubusercontent.com/erkansirin78/datasets/master/uforeports.csv', usecols=['State','Time']) burada usecols aslında bize o dataframede ki istediğimiz değişkeni seçmemizi sağlıyor.
# print(veri.describe()) burada seçtiğimiz o 2 değişkenin bilgileri sadece çıkar. 
# print(veri.median()) yine aynı şekilde o iki değişkenin medyanları çıkar.
# print(veri.quantile(q=0.25)) burada çeyreklik aldık. q 1. çeyregı aldı burada. yani aslında seçtiğimiz 2 değişkenin 1. katillerini bize gösterdi. 2. sini almasını isteseydik o zaman 0.50 yazardık.
# print(veri.std()) # standart sapmayı verir bize.
# print(veri.var()) varyansları verir bize.
# print(veri.kurtosis()) basıklığı verir bize.
# print(veri.skew()) çarpıklık değerini verir.



# video 16 :
# ...



# video 17:
# ölçekleme türlerinden bahsediyor. 




# video 18:
# .

# video 19:
# .


# video 20: burada merkezi limit teoremini python dilinde uyguladık.
# merkezi limit teoremi:statistik biliminde Merkezi Limit teoreminin çok anlamlı bir yeri vardır. Merkezi limit teoremine göre, süreç üzerinden alınan örnek sayısı artıkça ve dışarıdan bir etki olmadığı müddetçe
# farklı dağılım özelliği taşıyan süreç çıktıları histogram üzerinde ortalama değer etrafında normal dağılıma yakınsar bir dağılım gösterirler.
# import numpy as np
# import matplotlib.pyplot as plt
# veri= np.random.uniform(low=12,high=120,size=4000) # uniform dağılım olacak şekilde en düşük 12 en yüksek 120 ve 4000 tane veri ürettik. ama uniform şekilde ürettik.
# print(veri)
# print(veri.mean()) # ortalama çıktı.
# plt.hist(veri)
# print(plt.show()) # işte uniform dağılım bu şekilde ki grafiktir. 

# burda öğrenmem gereken bir kod parçacığı yazdım. eğer köşeli parantezleri unutursam kod çalışmaz.
kaho= [4+5 for m in range(10)]
print(kaho) # 9 sonucu 10 kere yazıldı.

# şimdi amacım yukarda ki bir sürü orneklem alıp uniform dağılı ortalama dağılıma çevirmek olacak.
# veriden 10 değer cektik. bunu 1000 kere yapmasını istedik. ve simdi elimizde 10 tane den oluşan 1000 tane orneklem var.
# ortalamaya doğruyu bulabilmek için her bir orneklemin ortalamalarının dağılımı bize normal dağılı verir. ve burada ki k 30 ve yukarısı oldukça ortama dağılım ortaya çıkar. bunu unutma.
orneklem= [np.mean(random.choices(veri, k=10)) for m in range(1000)]
plt.hist(orneklem)
print(plt.show())




# video 21: standart hata nedir?
# standart hata: populasyondan defalarca çektiğimiz orneklemlerin ortalamasının standart sapmasıdır. standart sapma ile standart hatayı karıştırma sakın.
# aynı şekilde standart hatayı da standart sapma gibi küçük isteriz ki böylece ortalamaya daha da yakın olur.



# video 22: 
import seaborn as sns
import numpy as np
import matplotlib as plt
veri=np.random.normal(45,5,1500) # ilk parametre ortalama, ortada ki standart sapma, son olan ise verisetinde kac tane deger oldugudur.
print(veri)

import seaborn as sns
import numpy as np
import matplotlib.pyplot as plt
veri=np.random.normal(45,5,1500)
print(veri)
# 1. yol: matplot ile
plt.hist(veri, bins=1200) # bins ayırdığı parça sayısını gösterir. 
plt.show()

# 2.yol : seaborn ile. seaborn ile matplottan daha ayrıntılı verdiği için seaborn kullanacağız.
sns.histplot(veri)
plt.show() # görüldüğü üzere daha detaylı verdi grafiği. bu yüzden veribiliminde matplottan daha çok seaborn kütüphanesi kullanılıyor.
sns.displot(veri , kde=True, color="y") # sarı renk verdim.
plt.show()
sns.kdeplot(veri) # sadece dağılım grafiğini verdi.



# video 23:
Örneğin, bir veri setinin ortalaması 100 ve standart sapması 15 ise, Z-score hesaplanarak verinin normal dağılımdaki konumunun belirlenmesi mümkündür. Eğer bir veri noktasının değeri 130 ise, Z-score hesaplanır:
Z = (130 - 100) / 15 = 2
Bu, verinin ortalama değerden 2 standart sapma uzak olduğunu gösterir. Verinin normal dağılımdaki konumu, Z-score'un pozitif veya negatif olmasına göre belirlenir.



video 24:










video 25: standart normal dağılımdan alan hesaplamaı z tablosu kullanılarak yapıldı.
Z-score, bir verinin standard normal dağılımdaki yeri olarak tanımlanır . dikkat normal dağılım demedim. standart dagılımın ortası sıfırdır.
z-table olasılık kısımlarında kullanılıyor. mesela bır seyın şu şeyin olasılık değeri sorulduğunda önce veri setinin normal dağılması gerekır. daha sonra bu olasılı degernı bulmak ıcın bu normal dagılımı standart normal dagılıma cevıriyoruz. daha sonra da alan hesaplama yapıp olasılık degerını buluyoruz. alaln hesaplaması da bı oncekı vıdeo da anlatılmıstı.
google da z tablo yaz burdan gordugun tablo sayesınde olasılık degerını ta olarak hesaplayabılırsın.

video 26: Şimdi yukarıda z tablo yöntemi le buldugumuız alanı suan scipy kütüphanesini kullanarak bulacagız.
soru şu olsun: bir veri setimiz olsun. bu veri setinin ortalaması: 5.3 olsun ve standart sapması = 1 olsun. şimdi bu veri setinin standart normal dağıldıgını varsayıyorum.
soru veri setinin 4.5 ten kucuk olma olasılıgı kactır?
z score= veri-ortalama/standart sapma . bunu kullanacagız. 4.5-5.3/1=-0.8 çıkar. bunu standart normal dagılımda gosterdıgımız zaman. artık google dan z tablosuna bakarak ta orda kı ıstenılen alanı bulabılrısın. ama 
bız burda bu scipy kutuphanesı kullnarak bulacagız.

from scipy.stats import norm
olasılık=norm(loc=5.3,scale=1).cdf(4.5) # norm da ilk parametre ortalamadır ve ortalama loc ile yazılır. ıkıncı parametre ıse satandart sapmadır o da scale ile yazılır. python da bır sey den kucuk olma olaslıgı ıse cdf ıle olur. kactan kucuk olmasını ısy-tıyorsak onuda cdf ye yazarak buluruz.
print(olasılık) # 0.21 cıktı. demek ki yüzde 21 imiş.

# eğer ki olasılıgın 4.5 ten buyuk olmasını ısteseydı o zamanyapacagımız sey asagıda kı satırda kı gıbı olurdu.
olasılık=1-norm(loc=5.3,scale=1).cdf(4.5)



28.videodayım:
serbestlik derecesi:
bu kavramı bir örnek üzerinden açıklarsam daha iyi anlarım. diyelim ki 3 tane sayımız var ve bu 3 sayının toplamı 10 olsun. eğer ben bu ıkı sayısının degerını belırlersem
3. sayı otomatikmen kesinleşmiş olur. burada bızım serbestlıgımız ıllk başta sectıgımız iki sayıdır.
bu vıdeo da çok detaya iniyor. istersen bakabilirsin.



29. video:
bizler eğer örneklem sayısı 30 dana büyük ise o zaman dağılım normal dağılıma yakınsadığını söylemiştik. ama bazı durumlarda örneklem saysısı yetersiz kalıp 30 dan düşük 
kalabiliyor. işte ozaman bizler normal dağılım ve standart dağılımları yönetemiyoruz. burada işte t dağılımı devreye giriyor.
t dağılımı normal dağılıma benzeyen bir dağılımdır.
bu t dağılımı örneklem sayısı 30 dan küçük ise kullanılır. olasılık hesaplamaları bu t dağılımı ile bulunur.
z tablosunda bize gerekli nokta z noktasıydı yani z scoruydu. bu sayede bizler alan hesaplama yapabiliyorduk. ama t dağılımda bize gerekli nokta ise df  yani serbestlik derecesi var.
t dağılımda serbestik derecesi arttikça t dağılımı normal dağılıma yakınsar bunu bil.


import numpy as np
from scipy import stats
import matplotlib.pyplot as plt
import seaborn as sns

np.random.seed(0) # bunu yazarak aldıgımız orneklemeler sabit kalmış oluyor. yani her seferinde örneklem değişmiyor.
# şimdi scipy kütüphanesi ile t tağılımı yapacağız. hatırlarsan normal dağılımı numpy kütüphanesi ile yapıyorduk.
veri=stats.t.rvs(loc=0,df=1,size=15) # hatırlarsan normal dagılımı numpy ile yapıyorduk. burda ıse t dagılımını ise stats ile yapıyoruz.
# loc 0 demekle grafiği normalleştiriyoruz çünkü loc a 0 demekle ortalama sıfır olur. df ise serbestlik payı oluyor.

sns.distplot(veri,color="yellow",kde=True)
plt.xlim(-5,5) # xlim() ile grafiğin sınırlarını belirlemiş oluyoruz.
plt.show()

veri2=stats.t.rvs(loc=0,df=2,size=15)
sns.distplot(veri2,color="black",kde=True,hist=False)
plt.show() # görüldüğü üzere df yani serbestliğini artırdığımız zaman grafik normalliğie daha yakınlaştı.

# böylece eğere  örnekleme sayısıs 30 degerınden düşük ise o zaman t dağılımını kullanıyoruz. google da t table dıyerek artık alan hesabını yapabilirsin.




30.video: tahmin teorisi:
aralık tahmini: şöyle olması yüzde 95 güvenilirlik ile doğru demek aslında biz burda aralık vermiş oluruz.

aralık tahmini eğer tek populasyon uzerınde ıse ve 2 populasyon uzerınde ıse bunlar hakkında bir şeyler yazacağım.

eğer ki aralık tahmini yaparken TEK POPÜLASYON üzerinde çalışırsak ve tek popülasyonun ORTALAMA TAHMİNİ yaparken : 
eğer popülasyonun standart sapması biliniyorsa "z tablosu" kullanılır. bak eğer orneklemın std verilmişse yine z kullanılmayabılır. bız std yı populasyon ıcın vermısse kesın o zaman z tablosu kullanırız.
eğer standart sapma bilinmiyorsa o zaman yine iki yolumuz var: orneklem sayısıs 30 dan büyük ise z tablo kullanılır.
eger ornekleme sayısı 30 dan kucukse o zaman da t dagılımı kullanılır.
sorularda daıma dıkkat et: verılen std orneklemın mı yoksa populasyonun mu.

eğer ki aralık tahmini yaparken tek popülasyon üzerinde çalışırsak ve tek popülasyonun STANDART SAPMA TAHMİNİ yaparken :
Bunun içi "ki kare tablosu" kullanılır.


eğer ki aralık tahmini yaparken tek popülasyon üzerinde çalışırsak ve tek popülasyonun ORAN TAHMİNİ yaparken :
Bunun için yine z tablo kullanılır.




eğer ki aralık tahmini yaparken İKİ POPÜLASYON üzerinde çalışırsak ve  ORTALAMA FARKI TAHMİNİ yaparken : 
Bunu yaparken eğer standart sapma biliniyorsa z tablo kullanılır.
eger std bilinmiyorsa o zaman varyans testleri kullanılır.



31.video:
bu video da grafıgı cızdık ve bız yuzde 90,95, ve 99 guvenırlılık ıle soyledıgımız alanları gosterdık daha sonra da bu alanların z score larını bulduk.

bir fabrikadan çekilen 100 ürünün std si 25 ve ortalam ağırlıkları ise 1040 tir. peki % 95 güvenilirlik aralığı  ile bu fabrikada ki tüm ürünlerin  ortalama ağırlığı nedir?
burdaa ilk başta grafiği çizdik daha sonra % 95 lik alanın z score larını çizdik. ve bunun z score larıda -1.96 ve +1.96 dır. ve bu tüm değerleri hocanın verdiği formüle yerleştirdiğimiz zaman 
aralık belli olur.



32.video:

#bir fabrikadan çekilen 100 ürünün std si 25 ve ortalam ağırlıkları ise 1040 tir. peki % 95 güvenilirlik aralığı  ile bu fabrikada ki tüm ürünlerin  ortalama ağırlığı nedir?
#burdaa ilk başta grafiği çizdik daha sonra % 95 lik alanın z score larını çizdik. ve bunun z score larıda -1.96 ve +1.96 dır. ve bu tüm değerleri hocanın verdiği formüle yerleştirdiğimiz zaman 
#aralık belli olur.

#bunu python ile yapalım bi de: 

import numpy as np
from scipy import stats
n=100
xort=1040
xstd=25
GuvenAralık=0.95

aralık=stats.norm.interval(alpha=GuvenAralık,loc=xort,scale=xstd/np.sqrt(n)) # numpy da sqrt karekok alma işlemini sağlar.
print(aralık) # goruldugu uzere aralık degerını verdi.

# varyans std nin karesidr unutma.




#33. video:
#şimdi sıra std bilinmiyorsa ve n 30 dan küçük ise: burada t dagılımı kullanılır.

import numpy as np
from scipy import stats
n=30
xort=140
xstd=25
GuvenAralık=0.95
sd=n-1 # sd : serbestlik derecesi 

aralık=stats.t.interval(alpha=0.95,loc=xort,df=sd,scale=xstd/np.sqrt(n))
print(aralık) # goruldugu uzere aralık degerleri ortaya çıktı.






34.video:
Şimdi iki popülasyonda aralık tahmini yapmayı öğreneceğiz.
burada populasyonun std biliniyorsa z tablosu kullanılır. ve de populasyonun std bilinmeyip n1 ve n2 >30 ise  zaman yine z tablosu kullanılır. ama std yok ve 
n1 n2 < 30 ise o zaman t tablosu kullanılır.
ornek: bır fabrıkada kı urun var : A ve B . Bunlar hakkında biligi verilmiş ve a ve b nın ortalama agırlıklarının farkları  sorulmuş. ortA-ortB % 95 guven ile ne kadar?

nA=28
nB=30
varyansA=164
varyansB=216
ortA=32
ortB=6
guven=0.95
import numpy as np
from scipy import stats
AralıkTahmını=stats.norm.interval(alpha=guven,loc=(ortA-ortB),scale=np.sqrt((varyansA/nA)+(varyansB/nB)))
print(AralıkTahmını)




ornek 2: serbestlık derecsı(df)= n1+n2-2 olur. cunku 2 tane grup var.
bu ornekte bırleştırilmiş varyans denılen bır terım var: bu terımın formulu var. bakabılrsın ınternetten. ya da vıdeo dan.
nA=8
nB=10
BırlestırılmısVaryans=0.05
ortA=3
ortB=2.7
guven=0.95
n3=((1/nA)+(1/nB))
import numpy as np
from scipy import stats
AralıkTahmını=stats.t.interval(alpha=guven,df=(nA+nB-2),loc=ortA-ortB, scale=np.sqrt(n3*BırlestırılmısVaryans))
print(AralıkTahmını)
















